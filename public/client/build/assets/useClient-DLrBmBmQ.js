import{c,d as I,e as y,aI as r,aa as C,a5 as p}from"./index-BCLPk4lW.js";const S=async()=>(await c.get("/clients")).data,F=async({clientId:e})=>(await c.get(`/clients/${e}`)).data,A=async({name:e,description:t})=>(await c.post("/clients",{name:e,description:t})).data,E=async({clientId:e,name:t,description:a})=>(await c.put(`/clients/${e}`,{name:t,description:a})).data,q=async({clientId:e})=>(await c.delete(`/clients/${e}`)).data,f=async({clientId:e,type:t,contact:a,description:o})=>(await c.post(`/clients/${e}/contacts`,{type:t,contact:a,description:o})).data,g=async({clientId:e,contactId:t,type:a,contact:o,description:l})=>(await c.put(`/clients/${e}/contacts/${t}`,{type:a,contact:o,description:l})).data,h=async({clientId:e,contactId:t})=>(await c.delete(`/clients/${e}/contacts/${t}`)).data,N=async({clientId:e,country:t,city:a,locality:o,address:l,postalCode:d})=>(await c.post(`/clients/${e}/addresses`,{country:t,city:a,locality:o,address:l,postalCode:d})).data,B=async({clientId:e,addressId:t,country:a,city:o,locality:l,address:d,postalCode:u})=>(await c.put(`/clients/${e}/addresses/${t}`,{country:a,city:o,locality:l,address:d,postalCode:u})).data,D=async({clientId:e,addressId:t})=>(await c.delete(`/clients/${e}/addresses/${t}`)).data,M=()=>{const e=I(),t=y({queryKey:["clients"],queryFn:S,onSuccess:i=>{e.setQueryData(["clients"],i)},refetchInterval:6e4}),a=i=>y({queryKey:["clients",i],queryFn:()=>F({clientId:i}),onSuccess:n=>{e.setQueryData(["clients",i],n)},enabled:!!i}),o=r({mutationFn:A,onSuccess:async()=>{await e.invalidateQueries(["clients"])}}),l=r({mutationFn:E,onSuccess:async(i,n)=>{const s=n.clientId;await e.invalidateQueries(["clients"]),await e.invalidateQueries(["clients",s])}}),d=r({mutationFn:f,onSuccess:async(i,n)=>{const s=n.clientId;await e.invalidateQueries(["clients"]),await e.invalidateQueries(["clients",s])}}),u=r({mutationFn:g,onSuccess:async(i,n)=>{const s=n.clientId;await e.invalidateQueries(["clients"]),await e.invalidateQueries(["clients",s])}}),w=r({mutationFn:h,onSuccess:async(i,n)=>{const s=n.clientId;await e.invalidateQueries(["clients"]),await e.invalidateQueries(["clients",s]),C("Contato removido com sucesso!")},onError:()=>{p("Erro ao remover contato!")}}),m=r({mutationFn:N,onSuccess:async(i,n)=>{const s=n.clientId;await e.invalidateQueries(["clients"]),await e.invalidateQueries(["clients",s])}}),Q=r({mutationFn:B,onSuccess:async(i,n)=>{const s=n.clientId;await e.invalidateQueries(["clients"]),await e.invalidateQueries(["clients",s])}}),v=r({mutationFn:D,onSuccess:async(i,n)=>{const s=n.clientId;await e.invalidateQueries(["clients"]),await e.invalidateQueries(["clients",s]),C("Morada eliminada com sucesso!")},onError:()=>{p("Erro ao eliminar morada!")}}),$=r({mutationFn:q,onSuccess:async(i,n)=>{const s=n.clientId;await e.invalidateQueries(["clients"]),await e.removeQueries(["clients",s]),C("Cliente eliminado com sucesso!")},onError:()=>{p("Erro ao eliminar cliente!")}});return{findAllClients:t,findClientById:a,createNewClient:o,updateClient:l,addNewContactClient:d,updateContactClient:u,deleteContactClient:w,addNewAddressClient:m,updateAddressClient:Q,deleteAddressClient:v,deleteClient:$}};export{M as u};
