import{a7 as t,a8 as C,i as p,a9 as a,aj as d,s as y}from"./index-mWc9gLhA.js";const de=async()=>(await t.get("/repairs/summary")).data,T=async()=>(await t.get("/repairs")).data,B=async({repairId:e})=>(await t.get(`/repairs/${e}`)).data,b=async({equipmentId:e,statusId:s,entryDescription:n,entryDatetime:i})=>(await t.post("/repairs",{equipmentId:e,statusId:s,entryDescription:n,entryDatetime:i})).data,j=async({repairId:e,statusId:s,entryAccessories:n,entryAccessoriesDescription:i,entryReportedIssues:u,entryReportedIssuesDescription:l,entryDescription:w,entryDatetime:v,interventionWorksDone:m,interventionWorksDoneDescription:R,interventionAccessoriesUsed:A,interventionAccessoriesUsedDescription:S,conclusionDatetime:I,deliveryDatetime:Q,isClientNotified:E,interventionDescription:$})=>(await t.put(`/repairs/${e}`,{statusId:s,entryAccessories:n,entryAccessoriesDescription:i,entryReportedIssues:u,entryReportedIssuesDescription:l,entryDescription:w,entryDatetime:v,interventionWorksDone:m,interventionWorksDoneDescription:R,interventionAccessoriesUsed:A,interventionAccessoriesUsedDescription:S,conclusionDatetime:I,deliveryDatetime:Q,isClientNotified:E,interventionDescription:$})).data,M=async({repairId:e})=>(await t.delete(`/repairs/${e}`)).data,z=async({repairId:e,attachments:s})=>{const n=new FormData;return s.forEach(u=>{n.append("attachments",u)}),(await t.post(`/repairs/${e}/attachments`,n,{headers:{"Content-Type":"multipart/form-data"}})).data},G=async({repairId:e,attachmentId:s})=>(await t.delete(`/repairs/${e}/attachments/${s}`)).data,H=async()=>(await t.get("/repairs/status")).data,J=async({name:e,color:s})=>(await t.post("/repairs/status",{name:e,color:s})).data,L=async({statusId:e,name:s,color:n})=>(await t.put(`/repairs/status/${e}`,{name:s,color:n})).data,O=async({statusId:e})=>(await t.delete(`/repairs/status/${e}`)).data,P=async()=>(await t.get("/repairs/entry-accessories")).data,V=async({name:e})=>(await t.post("/repairs/entry-accessories",{name:e})).data,X=async({entryAccessoryId:e,name:s})=>(await t.put(`/repairs/entry-accessories/${e}`,{name:s})).data,Y=async({entryAccessoryId:e})=>(await t.delete(`/repairs/entry-accessories/${e}`)).data,Z=async()=>(await t.get("/repairs/entry-reported-issues")).data,_=async({name:e})=>(await t.post("/repairs/entry-reported-issues",{name:e})).data,ee=async({entryReportedIssueId:e,name:s})=>(await t.put(`/repairs/entry-reported-issues/${e}`,{name:s})).data,se=async({entryReportedIssueId:e})=>(await t.delete(`/repairs/entry-reported-issues/${e}`)).data,te=async()=>(await t.get("/repairs/intervention-works-done")).data,re=async({name:e})=>(await t.post("/repairs/intervention-works-done",{name:e})).data,ae=async({interventionWorkDoneId:e,name:s})=>(await t.put(`/repairs/intervention-works-done/${e}`,{name:s})).data,ne=async({interventionWorkDoneId:e})=>(await t.delete(`/repairs/intervention-works-done/${e}`)).data,oe=async()=>(await t.get("/repairs/intervention-accessories-used")).data,ie=async({name:e})=>(await t.post("/repairs/intervention-accessories-used",{name:e})).data,ce=async({interventionAccessoryUsedId:e,name:s})=>(await t.put(`/repairs/intervention-accessories-used/${e}`,{name:s})).data,pe=async({interventionAccessoryUsedId:e})=>(await t.delete(`/repairs/intervention-accessories-used/${e}`)).data,ye=()=>{const e=C(),s=p({queryKey:["repairs"],queryFn:T,onSuccess:r=>{e.setQueryData(["repairs"],r)},refetchInterval:6e4}),n=r=>p({queryKey:["repairs",r],queryFn:()=>B({repairId:r}),onSuccess:o=>{e.setQueryData(["repairs",r],o)},enabled:!!r}),i=a({mutationFn:b,onSuccess:async()=>{await e.invalidateQueries(["repairs"]),d("Reparação adicionada com sucesso!")},onError:()=>{y("Erro ao adicionar reparação!")}}),u=a({mutationFn:j,onSuccess:async(r,o)=>{const c=o.repairId;await e.invalidateQueries(["repairs"]),await e.invalidateQueries(["repairs",c])}}),l=a({mutationFn:M,onSuccess:async(r,o)=>{const c=o.repairId;await e.invalidateQueries(["repairs"]),await e.removeQueries(["repairs",c]),d("Reparação eliminada com sucesso!")},onError:()=>{y("Erro ao eliminar reparação!")}}),w=a({mutationFn:z,onSuccess:async(r,o)=>{const c=o.repairId;await e.invalidateQueries(["repairs"]),await e.invalidateQueries(["repairs",c]),d("Anexo adicionado com sucesso!")},onError:()=>{y("Erro ao adicionar anexo!")}}),v=a({mutationFn:G,onSuccess:async(r,o)=>{const c=o.repairId;await e.invalidateQueries(["repairs"]),await e.invalidateQueries(["repairs",c]),d("Anexo eliminado com sucesso!")},onError:()=>{y("Erro ao eliminar anexo!")}}),m=p({queryKey:["repairs","statuses"],queryFn:H,onSuccess:r=>{e.setQueryData(["repairs","statuses"],r)}}),R=a({mutationFn:J,onSuccess:async()=>{await e.invalidateQueries(["repairs","statuses"])}}),A=a({mutationFn:L,onSuccess:async()=>{await e.invalidateQueries(["repairs","statuses"])}}),S=a({mutationFn:O,onSuccess:async()=>{await e.invalidateQueries(["repairs","statuses"])}}),I=p({queryKey:["repairs","entry-accessories"],queryFn:P,onSuccess:r=>{e.setQueryData(["repairs","entry-accessories"],r)}}),Q=a({mutationFn:V,onSuccess:async()=>{await e.invalidateQueries(["repairs","entry-accessories"])}}),E=a({mutationFn:X,onSuccess:async()=>{await e.invalidateQueries(["repairs","entry-accessories"])}}),$=a({mutationFn:Y,onSuccess:async()=>{await e.invalidateQueries(["repairs","entry-accessories"])}}),F=p({queryKey:["repairs","entry-reported-issues"],queryFn:Z,onSuccess:r=>{e.setQueryData(["repairs","entry-reported-issues"],r)}}),k=a({mutationFn:_,onSuccess:async()=>{await e.invalidateQueries(["repairs","entry-reported-issues"])}}),D=a({mutationFn:ee,onSuccess:async()=>{await e.invalidateQueries(["repairs","entry-reported-issues"])}}),g=a({mutationFn:se,onSuccess:async()=>{await e.invalidateQueries(["repairs","entry-reported-issues"])}}),q=p({queryKey:["repairs","intervention-works-done"],queryFn:te,onSuccess:r=>{e.setQueryData(["repairs","intervention-works-done"],r)}}),h=a({mutationFn:re,onSuccess:async()=>{await e.invalidateQueries(["repairs","intervention-works-done"])}}),f=a({mutationFn:ae,onSuccess:async()=>{await e.invalidateQueries(["repairs","intervention-works-done"])}}),U=a({mutationFn:ne,onSuccess:async()=>{await e.invalidateQueries(["repairs","intervention-works-done"])}}),W=p({queryKey:["repairs","intervention-accessories-used"],queryFn:oe,onSuccess:r=>{e.setQueryData(["repairs","intervention-accessories-used"],r)}}),K=a({mutationFn:ie,onSuccess:async()=>{await e.invalidateQueries(["repairs","intervention-accessories-used"])}}),N=a({mutationFn:ce,onSuccess:async()=>{await e.invalidateQueries(["repairs","intervention-accessories-used"])}}),x=a({mutationFn:pe,onSuccess:async()=>{await e.invalidateQueries(["repairs","intervention-accessories-used"])}});return{findAllRepairs:s,findRepairById:n,createNewRepair:i,updateRepair:u,deleteRepair:l,addNewRepairAttachment:w,deleteRepairAttachment:v,findAllRepairStatuses:m,createNewRepairStatus:R,updateRepairStatus:A,deleteRepairStatus:S,findAllEntryAccessories:I,createNewEntryAccessory:Q,updateEntryAccessory:E,deleteEntryAccessory:$,findAllEntryReportedIssues:F,createNewEntryReportedIssue:k,updateEntryReportedIssue:D,deleteEntryReportedIssue:g,findAllInterventionWorksDone:q,createNewInterventionWorkDone:h,updateInterventionWorkDone:f,deleteInterventionWorkDone:U,findAllInterventionAccessoriesUsed:W,createNewInterventionAccessoryUsed:K,updateInterventionAccessoryUsed:N,deleteInterventionAccessoryUsed:x}};export{de as g,ye as u};
