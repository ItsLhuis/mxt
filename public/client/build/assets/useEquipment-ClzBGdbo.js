import{k as $,l as i,ac as s,ab as u,s as m}from"./index-C9HasOiM.js";import{c as h,u as g,t as D,d as K,a as x,b as N,e as k,f as C,h as j,i as z,j as G,k as H,l as J,m as L,n as O,o as P,p as R,q as U,r as V,s as W,v as X}from"./equipment-DQ8Bx2dX.js";const _=()=>{const e=$(),o=i({queryKey:["equipments"],queryFn:P,onSuccess:t=>{e.setQueryData(["equipments"],t)},refetchInterval:6e4}),d=t=>i({queryKey:["equipments",t],queryFn:()=>R({equipmentId:t}),onSuccess:n=>{e.setQueryData(["equipments",t],n)},enabled:!!t}),p=s({mutationFn:h,onSuccess:async()=>{await e.invalidateQueries(["equipments"])}}),r=s({mutationFn:g,onSuccess:async(t,n)=>{const a=n.equipmentId;await e.invalidateQueries(["equipments"]),await e.invalidateQueries(["equipments",a])}}),c=s({mutationFn:D,onSuccess:async(t,n)=>{const a=n.equipmentId;await e.invalidateQueries(["equipments"]),await e.invalidateQueries(["equipments",a]),u("Equipamento transferido com sucesso!")},onError:()=>{m("Erro ao transferir equipamento!")}}),q=s({mutationFn:K,onSuccess:async(t,n)=>{const a=n.equipmentId;await e.invalidateQueries(["equipments"]),await e.removeQueries(["equipments",a]),u("Equipamento eliminado com sucesso!")},onError:()=>{m("Erro ao eliminar equipamento!")}}),l=s({mutationFn:x,onSuccess:async(t,n)=>{const a=n.equipmentId;await e.invalidateQueries(["equipments"]),await e.invalidateQueries(["equipments",a]),u("Anexo adicionado com sucesso!")},onError:()=>{m("Erro ao adicionar anexo!")}}),E=s({mutationFn:N,onSuccess:async(t,n)=>{const a=n.equipmentId;await e.invalidateQueries(["equipments"]),await e.invalidateQueries(["equipments",a]),u("Anexo eliminado com sucesso!")},onError:()=>{m("Erro ao eliminar anexo!")}}),y=i({queryKey:["equipments","types"],queryFn:U,onSuccess:t=>{e.setQueryData(["equipments","types"],t)}}),Q=s({mutationFn:k,onSuccess:async()=>{await e.invalidateQueries(["equipments","types"])}}),w=s({mutationFn:C,onSuccess:async()=>{await e.invalidateQueries(["equipments","types"])}}),v=s({mutationFn:j,onSuccess:async()=>{await e.invalidateQueries(["equipments","types"])}}),S=i({queryKey:["equipments","brands"],queryFn:V,onSuccess:t=>{e.setQueryData(["equipments","brands"],t)}}),F=s({mutationFn:z,onSuccess:async()=>{await e.invalidateQueries(["equipments","brands"])}}),b=s({mutationFn:G,onSuccess:async()=>{await e.invalidateQueries(["equipments","brands"])}}),A=s({mutationFn:H,onSuccess:async()=>{await e.invalidateQueries(["equipments","brands"])}}),B=i({queryKey:["equipments","models"],queryFn:W,onSuccess:t=>{e.setQueryData(["equipments","models"],t)}}),I=t=>i({queryKey:["equipments","models","brand",t],queryFn:()=>X({brandId:t}),onSuccess:n=>{e.setQueryData(["equipments","models","brand",t],n)},enabled:!!t}),f=s({mutationFn:J,onSuccess:async(t,n)=>{const a=n.brandId;await e.invalidateQueries(["equipments","models"]),await e.invalidateQueries(["equipments","models","brand",a])}}),M=s({mutationFn:L,onSuccess:async(t,n)=>{const a=n.brandId;await e.invalidateQueries(["equipments","models"]),await e.invalidateQueries(["equipments","models","brand",a])}}),T=s({mutationFn:O,onSuccess:async(t,n)=>{const a=n.modbrandIdelId;await e.invalidateQueries(["equipments","models"]),await e.removeQueries(["equipments","models","brand",a])}});return{findAllEquipments:o,findEquipmentById:d,createNewEquipment:p,updateEquipment:r,transferEquipment:c,deleteEquipment:q,addNewEquipmentAttachment:l,deleteEquipmentAttachment:E,findAllEquipmentTypes:y,createNewEquipmentType:Q,updateEquipmentType:w,deleteEquipmentType:v,findAllEquipmentBrands:S,createNewEquipmentBrand:F,updateEquipmentBrand:b,deleteEquipmentBrand:A,findAllEquipmentModels:B,findAllEquipmentModelsByBrandId:I,createNewEquipmentModel:f,updateEquipmentModel:M,deleteEquipmentModel:T}};export{_ as u};
